// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articles  Articles[]
  reportTrash     Trash[] @relation("reportTrash")
  pickedTrash      Trash[] @relation("pickedTash")
  cleanWalksAuthor CleanWalk[]
  cleanWalksParticipant CleanWalk[] @relation("participants")
  longitude Float?
  latitude Float?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
}

model Articles {
  id        String   @id @default(cuid())
  title     String
  body   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trash {
  id        String   @id @default(cuid())
  type      String
  image     String
  author    User     @relation(fields: [authorId], references: [id], name: "reportTrash")
  authorId  String
  pickedBy  User?     @relation(fields: [pickedById], references: [id], name: "pickedTash")
  pickedById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  longitude Float
  latitude Float
}

model CleanWalk {
  id        String   @id @default(cuid())
  description String
  name       String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  startDate  DateTime
  endDate    DateTime
  longitude  Float
  latitude   Float
  bannerImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  participants User[] @relation("participants")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}